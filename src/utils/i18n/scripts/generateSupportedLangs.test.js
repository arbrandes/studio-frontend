// Tests for the generateSupportedLangs.js command line.

import path from 'path';
import { main as realMain } from './generateSupportedLangs';

const sempleAppsDirectory = path.join(__dirname, '../../../../test-apps');

// History for `process.stdout.write` mock calls.
const logHistory = {
  log: [],
  latest: null,
};

// History for `fs.writeFileSync` mock calls.
const writeFileHistory = {
  log: [],
  latest: null,
};

// Mock for process.stdout.write
const log = (text) => {
  logHistory.latest = text;
  logHistory.log.push(text);
};

// Mock for fs.writeFileSync
const writeFileSync = (filename, content) => {
  const entry = { filename, content };
  writeFileHistory.latest = entry;
  writeFileHistory.log.push(entry);
};

// Main with mocked output
const main = (args) => realMain({
  log,
  writeFileSync,
  i18nMessagesDir: `${sempleAppsDirectory}/app-with-translations/src/i18n/messages`,
  ...args,
});

// Clean up mock histories
beforeEach(() => {
  logHistory.log = [];
  logHistory.latest = null;
  writeFileHistory.log = [];
  writeFileHistory.latest = null;
});

describe('help document', () => {
  it('should print help for --help', () => {
    const success = main({
      i18nMessagesDir: '--help',
    });
    expect(logHistory.latest).toMatch(
      "generateSupportedLangs.js — Script to generate the 'src/i18n/messages/currentlySupportedLangs.jsx'"
    );
    expect(success).toBe(true);
  });

  it('should print help for -h', () => {
    const success = main({
      i18nMessagesDir: '--help',
    });
    expect(logHistory.latest).toMatch(
      "generateSupportedLangs.js — Script to generate the 'src/i18n/messages/currentlySupportedLangs.jsx'"
    );
    expect(success).toBe(true);
  });
});

describe('generate with three languages', () => {
  it('should generate currentlySupportedLangs.jsx', () => {
    const success = main({
      i18nMessagesDir: `${sempleAppsDirectory}/app-with-translations/src/i18n/messages`,
    });

    expect(writeFileHistory.log.length).toBe(1);
    expect(writeFileHistory.latest.filename).toBe(`${sempleAppsDirectory}/app-with-translations/src/i18n/messages/currentlySupportedLangs.jsx`);
    expect(success).toBe(true); // Languages generated successfully

    // It should write the file with the following content:
    //  - import 'react-intl/locale-data/ar'
    //  - import 'react-intl/locale-data/fr' once but export it for both fr and fr-CA
    //  - import 'react-intl/locale-data/zh'
    //  - export the imported locale-data
    expect(writeFileHistory.latest.content).toEqual(`// This file is generated by the "generateSupportedLangs.js" script.
import arData from 'react-intl/locale-data/ar';
import frData from 'react-intl/locale-data/fr';
import zhData from 'react-intl/locale-data/zh';

export default {
  'ar': arData,
  'fr': frData,
  'fr-ca': frData,
  'zh-cn': zhData,
};
`);
  });
});

describe('generate errors', () => {
  it('should fail with no languages', () => {
    const success = main({
      i18nMessagesDir: `${sempleAppsDirectory}/app-without-translations/src/i18n/messages`,
    });

    // It should fail with the following error message:
    expect(logHistory.latest).toContain('generateSupportedLangs.js: Error: No language files found in the "');

    expect(writeFileHistory.log).toEqual([]);
    expect(success).toBe(false); // No languages to generate
  });

  it('should fail with no MESSAGES_DIR parameter', () => {
    const success = main({
      i18nMessagesDir: '',
    });

    // It should fail with the following error message:
    expect(logHistory.latest).toBe('generateSupportedLangs.js: Error: The "MESSAGES_DIR" parameter is required.\n');

    expect(writeFileHistory.log).toEqual([]);
    expect(success).toBe(false); // MESSAGES_DIR parameter is required
  });
});
